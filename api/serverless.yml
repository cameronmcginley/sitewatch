service: sitewatch-api

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-2
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${ssm:/sitewatch/${self:provider.stage}/dynamodb/table_name}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${ssm:/sitewatch/${self:provider.stage}/dynamodb/table_name}/index/userid-sk-index
        - Effect: Allow
          Action:
            - ssm:GetParameter
          Resource:
            - arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter/sitewatch/${self:provider.stage}/dynamodb/table_name

custom:
  corsConfig:
    origin: ${self:custom.origins.${self:provider.stage}, '*' }
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent

  origins:
    dev: "http://localhost:3000"
    prod: "https://sitewatchapp.com"

  apiKeys:
    dev:
      name: sitewatchApiKeyDev
    prod:
      name: sitewatchApiKeyProd

  usagePlan:
    throttle:
      burstLimit: 50
      rateLimit: 10
    quota:
      limit: 10000
      period: DAY

functions:
  createUser:
    handler: functions/createUser.handler
    events:
      - http:
          path: users
          method: post
          cors: ${self:custom.corsConfig}
          private: true

  getUser:
    handler: functions/getUser.handler
    events:
      - http:
          path: users
          method: get
          request:
            parameters:
              querystrings:
                userid: true
          cors: ${self:custom.corsConfig}
          private: true

  updateUser:
    handler: functions/updateUser.handler
    events:
      - http:
          path: users
          method: put
          request:
            parameters:
              querystrings:
                userid: true
          cors: ${self:custom.corsConfig}
          private: true

  createCheck:
    handler: functions/createCheck.handler
    events:
      - http:
          path: checks
          method: post
          cors: ${self:custom.corsConfig}
          private: true

  getCheck:
    handler: functions/getCheck.handler
    events:
      - http:
          path: checks
          method: get
          request:
            parameters:
              querystrings:
                userid: false
          cors: ${self:custom.corsConfig}
          private: true

  updateCheck:
    handler: functions/updateCheck.handler
    events:
      - http:
          path: checks
          method: put
          cors: ${self:custom.corsConfig}
          private: true

  deleteCheck:
    handler: functions/deleteCheck.handler
    events:
      - http:
          path: checks
          method: delete
          cors: ${self:custom.corsConfig}
          private: true

  optionsHandler:
    handler: functions/optionsHandler.handler
    events:
      - http:
          path: checks
          method: options
          cors: ${self:custom.corsConfig}
      - http:
          path: users
          method: options
          cors: ${self:custom.corsConfig}

package:
  individually: true
  patterns:
    - functions/**
    - ../node_modules/@aws-lambda-powertools/**
    - ../node_modules/lodash.merge/**

resources:
  Resources:
    # ApiGatewayUsageAlarm:
    #   Type: AWS::CloudWatch::Alarm
    #   Properties:
    #     AlarmName: "ApiGatewayUsageAlarm"
    #     MetricName: "Count"
    #     Namespace: "AWS/ApiGateway"
    #     Statistic: "Sum"
    #     Period: 86400 # Check daily
    #     EvaluationPeriods: 1
    #     Threshold: 900000 # before reaching 1 million calls
    #     ComparisonOperator: "GreaterThanOrEqualToThreshold"
    #     AlarmActions:
    #       - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:YourNotificationTopic"
    #     Dimensions:
    #       - Name: "ApiName"
    #         Value:
    #           Ref: "ApiGatewayRestApi"

    ApiGatewayUsagePlan:
      Type: AWS::ApiGateway::UsagePlan
      Properties:
        UsagePlanName: "SiteWatchUsagePlan"
        Throttle:
          BurstLimit: ${self:custom.usagePlan.throttle.burstLimit}
          RateLimit: ${self:custom.usagePlan.throttle.rateLimit}
        Quota:
          Limit: ${self:custom.usagePlan.quota.limit}
          Period: ${self:custom.usagePlan.quota.period}
        ApiStages:
          - ApiId:
              Ref: "ApiGatewayRestApi"
            Stage: ${self:provider.stage}

    ApiGatewayApiKey:
      Type: AWS::ApiGateway::ApiKey
      Properties:
        Name: ${self:custom.apiKeys.${self:provider.stage}.name}
        Enabled: true
        Value: ${ssm:/sitewatch/${self:provider.stage}/apiKey}
        StageKeys:
          - RestApiId:
              Ref: "ApiGatewayRestApi"
            StageName: ${self:provider.stage}

    # ApiGatewayUsagePlanKey:
    #   Type: AWS::ApiGateway::UsagePlanKey
    #   Properties:
    #     KeyId: !Ref ApiGatewayApiKey
    #     KeyType: "API_KEY"
    #     UsagePlanId: !Ref ApiGatewayUsagePlan

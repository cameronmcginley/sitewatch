service: sitewatch-api

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-2
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${ssm:/sitewatch/${self:provider.stage}/dynamodb/tableName}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${ssm:/sitewatch/${self:provider.stage}/dynamodb/tableName}/index/userid-sk-index
        - Effect: Allow
          Action:
            - ssm:GetParameter
          Resource:
            - arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter/sitewatch/${self:provider.stage}/dynamodb/tableName

custom:
  corsConfig:
    origin: "*"
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
  testEvents:
    createCheck:
      body: '{"alias": {"S": "TEST"}, "type": {"S": "TYPE"}}'

functions:
  createUser:
    handler: functions/createUser.handler
    events:
      - http:
          path: users
          method: post
          cors: ${self:custom.corsConfig}

  getUser:
    handler: functions/getUser.handler
    events:
      - http:
          path: users
          method: get
          request:
            parameters:
              querystrings:
                userid: false
          cors: ${self:custom.corsConfig}

  updateUser:
    handler: functions/updateUser.handler
    events:
      - http:
          path: items
          method: put
          request:
            parameters:
              querystrings:
                userid: true
          cors: ${self:custom.corsConfig}

  createCheck:
    handler: functions/createCheck.handler
    events:
      - http:
          path: items
          method: post
          cors: ${self:custom.corsConfig}

  getCheck:
    handler: functions/getCheck.handler
    events:
      - http:
          path: items
          method: get
          request:
            parameters:
              querystrings:
                userid: false
          cors: ${self:custom.corsConfig}

  updateCheck:
    handler: functions/updateCheck.handler
    events:
      - http:
          path: items
          method: put
          cors: ${self:custom.corsConfig}

  deleteCheck:
    handler: functions/deleteCheck.handler
    events:
      - http:
          path: items
          method: delete
          cors: ${self:custom.corsConfig}

  optionsHandler:
    handler: functions/optionsHandler.handler
    events:
      - http:
          path: items
          method: options
          cors: ${self:custom.corsConfig}
      - http:
          path: users
          method: options
          cors: ${self:custom.corsConfig}

package:
  include:
    - functions/**
